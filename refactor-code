interface InventoryService {
    void verifyInventory(Order order) throws Exception;
}

interface PaymentProcessService {
    boolean processPayment(double amount) throws Exception;
}

interface NotificationService {
    void sendNotification(String email, String message);
}

interface OrderRepository {
    void updateOrderStatus(int orderId, String status);
}

class InventoryServiceImpl implements InventoryService {
    @Override
    public void verifyInventory(Order order) throws Exception {
        if (inventory < order.getQuantity() ) {
            throw new Exception("Out of stock");
        }
    }
}

class StandardPaymentProcessorService implements PaymentProcessService {
    private StandarPaymentService standarPaymentService;

    public StandardPaymentProcessor(StandarPaymentService standarPaymentService) {
        this.standarPaymentService = standarPaymentService;
    }

    @Override
    public boolean processPayment(double amount) {
        return standarPaymentService.process(amount);
    }
}

class ExpressPaymentProcessorService implements PaymentProcessService {
    private ExpressPaymentService expressPaymentService;

    public ExpressPaymentProcessor(ExpressPaymentService expressPaymentService) {
        this.expressPaymentService = expressPaymentService;
    }

    @Override
    public boolean processPayment(double amount) {
        return expressPaymentService.process(amount, "priority");
    }
}


class OrderRepositoryImpl implements OrderRepository {

    private final Connection database; // Atributo de conexión a la base de datos

    public OrderRepositoryImpl(Connection database) {
        this.database = database;
    }

    @Override
    public void updateOrderStatus(int orderId, String status) {
        // Actualización en bd conforme los parametroos   
    }
}

class NotificationServiceImpl implements NotificationService {
    @Override
    public void sendNotification(String email, String message) {
        // Envía un email de notificación al cliente
    }
}

class OrderProcessor {
    private InventoryService inventoryService;
    private OrderRepository orderRepository;
    private NotificationService notificationService;
    private PaymentProcessService paymentProcessService;
    
    public OrderProcessor(InventoryService inventoryService, 
        OrderRepository orderRepository, 
        NotificationService notificationService, 
        PaymentProcessService paymentProcessService) {
        this.inventoryService = inventoryService;
        this.orderRepository = orderRepository;
        this.notificationService = notificationService;
        this.paymentProcessService = paymentProcessService;
    }

    public void processOrder(Order order) {
        inventoryService.verifyInventory(order);
        paymentProcessService.processPayment(order);
        orderRepository.updateOrderStatus(order, "processed");
        notificationService.sendNotification("email","Your order has been processed.");
    }
}

public class Main {
    public static void main(String[] args) {

        InventoryService inventoryService = new InventoryServiceImpl();
        OrderRepository orderRepository = new OrderRepositoryImpl();
        NotificationService notificationService = new NotificationServiceImpl();

        // Crear el servicio de pago estándar y su procesador
        PaymentProcessService paymentProcessService = new StandardPaymentProcessorService(standarPaymentService);

        // Crear la instancia de OrderProcessor con los servicios inyectados
        OrderProcessor orderProcessor = new OrderProcessor(
            inventoryService,
            orderRepository,
            notificationService,
            paymentProcessService
        );


        // Crear el servicio de pago estándar y su procesador
        paymentProcessService = new StandardPaymentProcessorService(standarPaymentService);

        // Crear la instancia de OrderProcessor con los servicios inyectados
        OrderProcessor orderProcessor = new OrderProcessor(
            inventoryService,
            orderRepository,
            notificationService,
            paymentProcessService
        );

        // Crear el servicio de pago xpress y su procesador
        paymentProcessService = new ExpressPaymentProcessorService(standarPaymentService);

        // Crear la instancia de OrderProcessor con los servicios inyectados
        orderProcessor = new OrderProcessor(
            inventoryService,
            orderRepository,
            notificationService,
            paymentProcessService
        );        
    }
}

